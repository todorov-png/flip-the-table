"use strict";const $tables=document.querySelectorAll("table");function elementEntryWithAttribute(e,t,r){t.forEach((l,a)=>{const c=l.getAttribute("colspan"),n=l.getAttribute("rowspan");if(c){const n=document.createElement("td");n.classList.add("table-plug"),t.splice(a+1,0,n),l.removeAttribute("colspan"),e.colspan.push([r,a,c])}n&&(l.removeAttribute("rowspan"),e.rowspan.push([r,a,n]))})}function rotateArray(e){return e.map((t,r)=>e.map(e=>e[r]))}function returningAttributes(e,t){return t.rowspan.forEach(t=>{e[t[0]][t[1]].setAttribute("colspan",t[2]);for(let r=1;r<t[2];r++){const l=document.createElement("td");l.classList.add("table-plug"),e[t[0]+r].splice(t[1],0,l)}}),t.colspan.forEach(t=>{e[t[0]][t[1]].setAttribute("rowspan",t[2])}),e}function createNewTable(e){const t=document.createElement("table");e.forEach(e=>{const r=document.createElement("tr");e.forEach(e=>{r.append(e)}),t.append(r)}),document.querySelector(".new-table").append(t)}function replacementTable(e,t){e.forEach(e=>{const r=document.createElement("tr");e.forEach(e=>{r.append(e)}),t.append(r)})}function clearPlug(){document.querySelectorAll(".table-plug").forEach(e=>e.remove())}$tables.length&&($tables.forEach(e=>{const t=Array.prototype.slice.call(e.querySelectorAll("tr")),r=[],l={rowspan:[],colspan:[]};t.forEach((e,t)=>{let a=Array.prototype.slice.call(e.querySelectorAll("td"));a.length||(a=Array.prototype.slice.call(e.querySelectorAll("th"))),elementEntryWithAttribute(l,a,t),r.push(a)}),replacementTable(rotateArray(returningAttributes(r,l)),e)}),clearPlug());